/**
 * Item Rating Modal
 * Adds a modal dialog for rating items on the item details page.
 * Works with the existing rating system but provides a modal experience.
 */
document.addEventListener('DOMContentLoaded', function() {
  // Wait for the rating system to initialize and load ratings
  const checkForRatingSystem = setInterval(() => {
    if (window.ratingSystem && document.getElementById('addReviewBtn')) {
      clearInterval(checkForRatingSystem);
      initRatingModal();
    }
  }, 100);

  function initRatingModal() {
    // Get the existing Add Review button
    const addReviewBtn = document.getElementById('addReviewBtn');
    
    // Create the modal HTML if it doesn't exist
    if (!document.getElementById('ratingDialog')) {
      const modalHTML = `
        <div id="ratingDialog" class="rating-dialog" style="display:none;">
          <div class="rating-dialog-content">
            <div class="rating-dialog-header">
              <h3>Rate This Item</h3>
              <button class="close-dialog-btn" id="closeRatingDialog">&times;</button>
            </div>
            <div class="rating-dialog-body">
              <div class="rating-stars star-rating-large" id="dialogStarRating">
                <!-- Stars will be generated by JS -->
              </div>
              <div class="comment-field">
                <textarea id="dialogComment" placeholder="Share your experience..."></textarea>
              </div>
              <div class="dialog-actions">
                <button class="cancel-btn" id="cancelDialogBtn">Cancel</button>
                <button class="submit-btn" id="submitDialogBtn">Submit</button>
              </div>
            </div>
          </div>
        </div>
      `;
      
      // Add modal to the page
      document.body.insertAdjacentHTML('beforeend', modalHTML);
      
      // Add CSS for the modal if needed
      if (!document.querySelector('style#rating-modal-styles')) {
        const styleElement = document.createElement('style');
        styleElement.id = 'rating-modal-styles';
        styleElement.textContent = `
          .rating-dialog {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 1000;
            justify-content: center;
            align-items: center;
          }
          
          .rating-dialog-content {
            background-color: white;
            border-radius: 8px;
            width: 90%;
            max-width: 500px;
            max-height: 90vh;
            overflow-y: auto;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
          }
          
          .rating-dialog-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px 20px;
            border-bottom: 1px solid #eee;
          }
          
          .rating-dialog-header h3 {
            margin: 0;
            font-size: 18px;
          }
          
          .close-dialog-btn {
            background: none;
            border: none;
            font-size: 24px;
            cursor: pointer;
            color: #666;
          }
          
          .rating-dialog-body {
            padding: 20px;
          }
          
          .rating-stars {
            display: flex;
            justify-content: center;
            margin-bottom: 20px;
          }
          
          .star-rating-large .star {
            font-size: 30px;
            margin: 0 5px;
            cursor: pointer;
          }
          
          .star-rating-large .star i {
            color: #ccc;
          }
          
          .star-rating-large .star.active i {
            color: #ffcc33;
          }
          
          .comment-field {
            margin-bottom: 20px;
          }
          
          .comment-field textarea {
            width: 100%;
            min-height: 100px;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            resize: vertical;
          }
          
          .dialog-actions {
            display: flex;
            justify-content: flex-end;
            gap: 10px;
          }
          
          .cancel-btn {
            padding: 8px 15px;
            background-color: #f5f5f5;
            border: 1px solid #ddd;
            border-radius: 4px;
            cursor: pointer;
          }
          
          .submit-btn {
            padding: 8px 15px;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
          }
        `;
        document.head.appendChild(styleElement);
      }
    }
    
    // Get modal elements
    const ratingDialog = document.getElementById('ratingDialog');
    const closeDialogBtn = document.getElementById('closeRatingDialog');
    const cancelDialogBtn = document.getElementById('cancelDialogBtn');
    const submitDialogBtn = document.getElementById('submitDialogBtn');
    const dialogStarRating = document.getElementById('dialogStarRating');
    const dialogComment = document.getElementById('dialogComment');
    
    // Modal state
    let selectedRating = 0;
    let editingRatingId = null;
    
    // Modal functions
    function openRatingDialog(existingRating = null) {
      // Get current user rating if it exists
      if (!existingRating && window.ratingSystem) {
        const listingId = new URLSearchParams(window.location.search).get('listingId') || 
                         new URLSearchParams(window.location.search).get('itemId');
        const userRating = window.ratingSystem.getUserRating(listingId);
        if (userRating) {
          existingRating = userRating;
        }
      }
      
      ratingDialog.style.display = 'flex';
      
      // Generate stars
      dialogStarRating.innerHTML = '';
      for (let i = 1; i <= 5; i++) {
        const label = document.createElement('label');
        label.dataset.value = i;
        label.innerHTML = `<i class="ri-star-fill"></i>`;
        label.classList.add('star');
        if (existingRating && i <= existingRating.score) {
          label.classList.add('active');
        }
        label.onclick = () => setDialogStarRating(i);
        dialogStarRating.prepend(label); // so 5 is leftmost
      }
      
      // Set initial values
      dialogComment.value = existingRating ? existingRating.comment : '';
      selectedRating = existingRating ? existingRating.score : 0;
      editingRatingId = existingRating ? existingRating._id : null;
      
      // Update star colors based on initial values
      if (selectedRating > 0) {
        setDialogStarRating(selectedRating);
      }
    }
    
    function setDialogStarRating(value) {
      selectedRating = value;
      const stars = dialogStarRating.querySelectorAll('label');
      stars.forEach(star => {
        const starValue = parseInt(star.dataset.value);
        if (starValue <= value) {
          star.classList.add('active');
          star.querySelector('i').style.color = '#ffcc33';
        } else {
          star.classList.remove('active');
          star.querySelector('i').style.color = '#ccc';
        }
      });
    }
    
    function closeRatingDialog() {
      ratingDialog.style.display = 'none';
      selectedRating = 0;
      dialogComment.value = '';
      editingRatingId = null;
    }
    
    // Override the original Add Review button click to open our modal instead
    addReviewBtn.addEventListener('click', (e) => {
      e.preventDefault();
      openRatingDialog();
    });
    
    // Check if we should automatically open the rating dialog from URL parameter
    const urlParams = new URLSearchParams(window.location.search);
    if (urlParams.get('showRating') === 'true') {
      // Small delay to ensure everything is loaded
      setTimeout(() => {
        openRatingDialog();
      }, 500);
    }
    
    // Add event listeners for modal controls
    closeDialogBtn.addEventListener('click', closeRatingDialog);
    cancelDialogBtn.addEventListener('click', closeRatingDialog);
    
    // Submit button handler
    submitDialogBtn.addEventListener('click', async () => {
      const token = localStorage.getItem('token');
      const listingId = new URLSearchParams(window.location.search).get('listingId') || 
                       new URLSearchParams(window.location.search).get('itemId');
      const comment = dialogComment.value.trim();
      
      if (!selectedRating) {
        alert('Please select a rating.');
        return;
      }
      
      if (!token) {
        alert('You must be logged in to submit a review.');
        return;
      }
      
      try {
        let response;
        const baseUrl = 'http://localhost:3000/api';
        
        if (editingRatingId) {
          response = await fetch(`${baseUrl}/ratings/${editingRatingId}`, {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${token}`
            },
            body: JSON.stringify({ score: selectedRating, comment })
          });
        } else {
          response = await fetch(`${baseUrl}/ratings`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${token}`
            },
            body: JSON.stringify({ listingId, score: selectedRating, comment })
          });
        }
        
        if (!response.ok) throw new Error('Failed to submit review');
        
        closeRatingDialog();
        
        // Reload ratings to show the updated data
        if (window.ratingSystem) {
          window.ratingSystem.loadItemRatings(listingId);
        } else if (window.itemDetailManager) {
          window.itemDetailManager.loadItemRatings();
        } else {
          // Fallback: reload the page
          setTimeout(() => window.location.reload(), 500);
        }
        
      } catch (err) {
        alert('Error submitting review: ' + err.message);
      }
    });
  }
});
